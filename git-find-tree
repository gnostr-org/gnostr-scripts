#!/bin/bash

# Usage: git find-tree [options] [<tree-ish>] <path>
#
# Options:
#     -c, --combined
#     -a, --all
#     -s, --include-submodules
#
# Finds the path to <path> within <tree-ish>, or HEAD if unspecified.
# The <path> may contain glob characters. Note that / is matched by glob
# characters.
#
# If --combined is specified, the output is <tree-ish>:<full path>. Otherwise
# the output is a path relative to the current working dir. Only one path is
# ever emitted, unless --all is specified.
#
# If --include-submodules is specified, submodules are searched as well.
# --include-submodules is ignored if --combined is specified.
#
# If no path matches, the command returns with an exit code 1.

function usage () {
	echo "Usage: git find-tree [options] [<tree-ish>] <path>"
	echo
	echo "Options:"
	echo "  -c --combined            Prints a rev-parse string for the blob instead of"
	echo "                           the relative file path."
	echo "  -a --all                 Print all matches instead of just the first."
	echo "  -s --include-submodules  Include submodules in the search."
	echo "                           This flag is ignored if --combined is given."
	echo
	echo "Arguments:"
	echo "  <tree-ish>  The tree-ish to look for the file in. [default: HEAD]"
	echo "  <path>      The filename pattern to look for."
	[[ -z $1 ]] && return
	echo
	echo "Description:"
	echo "  Finds the path to <path> within <tree-ish>. The <path> may contain glob"
	echo "  characters. Note that / is matched by glob characters."
	echo
	echo "  The default output is a path relative to the current working directory."
	echo "  If --combined is given, the output is '<tree-ish>:<full path>', suitable"
	echo "  for passing to other git commands."
	echo
	echo "  Only a single path is printed, unless --all is given. If no paths are found,"
	echo "  this script exits with code 1."
}

declare combined=no
declare all=no
declare incsub=no
while true; do
	case "$1" in
		-c|--combined) combined=yes; shift;;
		-a|--all) all=yes; shift;;
		-s|--include-submodules) incsub=yes; shift;;
		-h|--help) usage full; exit 0;;
		-*) usage >&2; exit 2;;
		*) break;;
	esac
done

if [[ "$combined" == yes && "$incsub" == yes ]]; then
	incsub=no
fi

declare treeish=HEAD
declare path
case $# in
	1) path=$1;;
	2) treeish=$1; path=$2;;
	*) usage >&2; exit 2;;
esac

if [[ -z "$path" ]]; then
	usage >&2; exit 2;
fi
if [[ -z "$treeish" ]]; then
	usage >&2; exit 2;
fi

# git ls-tree has a bug (in git v1.8.4.2) wherein the -t flag
# causes the command to output nothing if executed from a subdirectory.
# Passing --full-name or --full-tree fixes this issue,
# but we need to do the filtering ourselves.
declare -a flags=(-r -t --full-name)

declare prefix
prefix=$(git rev-parse --show-prefix) || exit
declare out_prefix=

if [[ "$combined" == yes ]]; then
	out_prefix=$(git rev-parse --short "$treeish" 2>/dev/null):${prefix:+./}
fi

declare -i found=0
declare git_dir # separate commands so $? works
git_dir=$(git rev-parse --git-dir) || exit

searchTree() {
	local treeish=$1
	local git_dir=$2
	local submod=$3
	local submod_path=${4:+${4%/}/}
	local prefix=$prefix
	declare -a gitflags
	if [[ -n "$submod" ]]; then
		prefix=
		git_dir+=/modules/$submod
		gitflags+=(--git-dir "$git_dir")
	fi
	local typ obj file
	local output
	output=$(git "${gitflags[@]}" ls-tree "${flags[@]}" "$treeish") || return
	while read -r _ typ obj file; do
		file=${file:${#prefix}}
		# shellcheck disable=SC2254
		case "$file" in
			*/$path|$path)
				echo "$out_prefix$submod_path$file"
				if [[ "$all" != yes ]]; then return; fi
				found+=1
				;;
		esac
		if [[ "$incsub" == yes && "$typ" == commit ]]; then
			searchTree "$obj" "$git_dir" "$prefix$file" "$submod_path$file" || return
			[[ $all == yes ]] || (( found == 0 )) || return
		fi
	done <<<"$output"
}

searchTree "$treeish" "$git_dir" || exit
if (( found == 0 )); then
	exit 1
fi
