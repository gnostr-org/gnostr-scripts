#!/bin/bash

die() {
    echo "error:" "$@" >&2
    exit 1
}

usage() {
    echo "Usage: git find-merge [-ob] COMMIT [BRANCH]"
    echo
    echo "Options:"
    echo "  -h --help     Displays this help."
    echo "  -o --oneline  Displays the output as a single line."
    echo "  -b --bare     Shows just the merge commit hash."
    echo "  -a --all      Shows all merges responsible for the commit."
    echo
    echo "Arguments:"
    echo "  COMMIT  The commit to find the merge for."
    echo "  BRANCH  The branch that COMMIT should be reachable from. [default: HEAD]"
    [[ -z $1 ]] && return
    echo
    echo "Description:"
    echo "  Finds the oldest merge in the first-parent history of BRANCH that COMMIT"
    echo "  is reachable from. If --all is specified, shows all merges (if any) that"
    echo "  exist between the oldest first-parent merge an COMMIT."
}

opt_format=
opt_all=0

while (( $# != 0 )); do
    case "$1" in
        -[^-]?*)
            flag=$1
            shift
            set -- "${flag:0:2}" -"${flag:2}" "$@"
            continue
            ;;
        -h|--help)
            usage full
            exit 0
            ;;
        -o|--oneline)
            opt_format=oneline
            ;;
        -b|--bare)
            opt_format=%H
            ;;
        -a|--all)
            opt_all=1
            ;;
        --)
            shift
            break
            ;;
        -*)
            die "$(printf "unknown flag: %s\n%s\n" "$1" "$(usage)")"
            ;;
        *)
            break
            ;;
    esac
    shift
done

commit=$1
shift || die "$(usage)"
branch=${1:-HEAD}
shift # branch is optional
shift && die "$(usage)" # too many args

[[ "$commit" == -* ]] && die "bad revision '$commit'"
[[ "$branch" == -* ]] && die "bad branch '$branch'"

commitSha=$(git rev-parse --verify "${commit}^{commit}") \
    || die "'$commit' is not a valid branch or revision"

revs=$(git rev-list --ancestry-path --topo-order --format=%P "$branch" --not "$commitSha" --) \
    || die "command 'git rev-list' failed"
# The output of this command looks like
#
#   commit <SHA>
#   <SHA> <SHA>...
#
# Each commit listed is a child of a previously-listed commit, starting with a child of $commit.
# However any given commit may not be a child of the previous commit, in the event that multiple
# children branch from the same parent.

[[ -n "$revs" ]] || die "'$commit' is not reachable from '$branch'"

# sanity-check the rev-list output so we error out if it doesn't match our expectation
while read -r word sha _; do
    {
        [[ "$word" == commit && -n "$sha" ]] \
        && read -r parent _ \
        && [[ -n "$parent" ]];
    } || die "invalid rev-list output"
done <<<"$revs"

# Keep track of the oldest first parent on the ancestry graph.
oldestFirstParent=
oldestFirstParentParent2=
{
    { read -r _ sha _ && read -r parent _; } || die "internal error" # we know it's non-empty
    oldestFirstParent=$sha
    nextFirstParent=$parent
    while read -r _ sha; do
        read -r parent parent2 || die "internal error"
        if [[ "$nextFirstParent" == "$sha" ]]; then
            # We're on the first-parent history
            oldestFirstParent=$sha
            nextFirstParent=$parent
            oldestFirstParentParent2=$parent2
        fi
    done
} <<<"$revs"

[[ "$nextFirstParent" == "$commitSha" ]] && die "'$commit' is on the first-parent history of '$branch'"

no_pager=(--no-pager)
if (( opt_all )); then
    # Do another ancestry-path search so we don't have to calculate that ourselves
    if revs=$(git rev-list --merges --ancestry-path --topo-order "$oldestFirstParent" --not "$commitSha"); then
        IFS=$'\n' read -d '' -ra merges <<<"$revs"
        if (( ${#merges} > 1 )); then
            no_pager=() # use the pager
        fi
    else
        echo "error: couldn't fetch new ancestry path from $oldestFirstParent" >&2
        # don't fail
        merges=("$oldestFirstParent")
    fi
else
    # oldestFirstParent must be a merge
    [[ -n "$oldestFirstParentParent2" ]] || die "internal error: oldest first parent isn't a merge"
    merges=("$oldestFirstParent")
fi

exec git "${no_pager[@]}" show --no-patch ${opt_format:+--format="$opt_format"} "${merges[@]}" --
