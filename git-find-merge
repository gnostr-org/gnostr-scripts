#!/bin/bash

die() {
    echo "$@" >&2
    exit 1
}

usage() {
    echo "Usage: git find-merge [-ob] COMMIT [BRANCH]"
    echo
    echo "Options:"
    echo "  -h --help     Displays this help."
    echo "  -o --oneline  Displays the output as a single line."
    echo "  -b --bare     Shows just the merge commit."
    #echo "  -a --all"
    echo
    echo "Arguments:"
    echo "  COMMIT  The commit to find the merge for."
    echo "  BRANCH  The branch that COMMIT should be reachable from. [default: HEAD]"
    [[ -z $1 ]] && return
    echo
    echo "Description:"
    echo "  Finds the oldest merge in the first-parent history of BRANCH that COMMIT"
    echo "  is reachable from."
}

format=
#all=no
opt_bare=

while (( $# != 0 )); do
    case "$1" in
        -[^-]?*)
            flag=$1
            shift
            set -- "${flag:0:2}" -"${flag:2}" "$@"
            continue
            ;;
        -h|--help)
            usage full
            exit 0
            ;;
        -o|--oneline)
            format=oneline
            ;;
        -b|--bare)
            opt_bare=yes
            ;;
        #-a|--all)
            #all=yes
            #;;
        --)
            shift
            break
            ;;
        -*)
            die "$(printf "unknown flag: %s\n%s\n" "$1" "$(usage)")"
            ;;
        *)
            break
            ;;
    esac
    shift
done

commit=$1
shift || die "$(usage)"
branch=${1:-HEAD}
shift # branch is optional
shift && die "$(usage)" # too many args

[[ "$commit" == -* ]] && die "bad revision '$commit'"
[[ "$branch" == -* ]] && die "bad branch '$branch'"

revs=$(git rev-list --ancestry-path --topo-order --format=%P "$branch" --not "$commit" --) \
    || die "command 'git rev-list' failed"

merge=
parent=
while read -r word sha && [[ "$word" == commit ]]; do
    if ! [[ -z "$parent" || "$parent" == "$sha" ]]; then
        read -r _ # skip next line
        continue
    fi
    { read -r parent parent2 && [[ -n "$parent" ]]; } || die "invalid rev-list output"
    if [[ -n "$parent2" ]]; then
        merge=$sha
    else
        merge=
    fi
done <<<"$revs"

[[ -n "$merge" ]] || die "Couldn't find any merge point"

if [[ -n $opt_bare ]]; then
    echo "$merge"
else
    exec git --no-pager log --max-count=1 ${format:+--format="$format"} "$merge" --
fi
