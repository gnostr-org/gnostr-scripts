#!/bin/bash

# shellcheck source=./utils.bash
. "${BASH_SOURCE[0]%/*}"/utils.bash

usage() {
    echo "Usage: git close-current-branch [-fun] [MAINLINE]"
    echo
    echo "Options:"
    echo "  -h --help      Displays this help."
    echo "  -f --force     Close the branch even if upstream exists."
    echo "  -e --fetch     Run git fetch before doing anything else."
    echo "  -u --upstream  Close the upstream branch."
    echo "  -n --dry-run   Don't actually make any changes."
    [[ -z $1 ]] && return
    echo
    echo "Description:"
    echo "  Closes the current branch if it's been merged into the mainline."
    echo "  The config key close-current-branch.mainline defines the default mainline"
    echo "  if not given as an argument, with 'main' or 'master' as the default if unset."
    echo
    echo "  This script is intended to be used after a pull request is merged and the"
    echo "  remote branch is closed. If the remote branch isn't closed, the -u"
    echo "  flag can be used to close it, or the -f flag can be used to ignore it."
    echo
    echo "Example:"
    echo "  > git close-current-branch -e"
}

detectMainline() {
    local branch
    if ! branch=$(git config --get close-current-branch.mainline); then
        # check if we can find a master or main branch in order to pick our default.
        git rev-parse -q --verify refs/heads/master >/dev/null \
        && ! git rev-parse -q --verify refs/heads/main >/dev/null \
        && branch=refs/heads/master \
        || branch=refs/heads/main
        color yellow "warning:" reset " no mainline provided, assuming " cyan "$branch" reset >&2
        color yellow "note:" reset " set config value " yellow "close-current-branch.mainline" reset " to suppress this warning" >&2
    fi
    printf "%s\n" "$branch"
}

opt_force=0
opt_upstream=0
opt_dry_run=0
opt_fetch=0
while (( $# > 0 )); do
    case "$1" in
        -[^-]?*)
            flag=$1
            shift
            set -- "${flag:0:2}" "-${flag:2}" "$@"
            continue
            ;;
        -h|--help)
            usage full
            exit
            ;;
        -f|--force)
            opt_force=1
            ;;
        -e|--fetch)
            opt_fetch=1
            ;;
        -u|--upstream)
            opt_upstream=1
            ;;
        -n|--dry-run)
            opt_dry_run=1
            ;;
        --)
            shift
            break
            ;;
        -*)
            die 2 "unknown flag $1" "$(usage)"
            ;;
        *)
            break
            ;;
    esac
    shift
done

mainline=$1
(( $# > 1 )) && die 2 "expected at most 1 parameter, found $#" "$(usage)"

git rev-parse --git-dir >/dev/null || exit

[[ -z $mainline ]] && { mainline=$(detectMainline) || exit; }
mainline=$(git rev-parse --revs-only --symbolic-full-name "$mainline" --) || exit
test -n "$mainline" || die "unknown branch '$mainline'"

if (( opt_fetch )); then
    echo "Fetching..."
    git fetch || exit
fi

HEAD=$(git rev-parse --revs-only --symbolic-full-name HEAD --) || exit
test "$HEAD" != "HEAD" || die "detached HEAD"
HEADname='' HEADcommit='' HEADupstream='' HEADupstreamname='' # suppress shellcheck warnings
eval "$(git for-each-ref --count=1 --shell --format='
    HEADname=%(refname:short)
    HEADcommit=%(objectname)
    HEADupstream=%(upstream)
    HEADupstreamname=%(upstream:short)
' -- "$HEAD")"
test -n "$HEADcommit" || die 3 "couldn't find ref information for HEAD ($HEAD)"
HEADshort=${HEAD#refs/heads/}

ref='' refname='' commit='' upstream='' upstreamname='' # suppress shellcheck warnings
eval "$(git for-each-ref --count=1 --shell --format='
    ref=%(refname)
    refname=%(refname:short)
    commit=%(objectname)
    upstream=%(upstream)
    upstreamname=%(upstream:short)
' -- "$mainline")"
test -n "$ref" || die "no such branch '$mainline'"
test "$ref" != "$HEAD" || die "$refname is currently checked out"

msg_suffix=()
(( opt_dry_run )) && msg_suffix=(yellow " [dry run]" reset)

if ! git merge-base --is-ancestor "$HEADcommit" "$commit"; then
    # mainline does not contain our branch
    test -n "$upstream" || die "$refname does not contain HEAD"

    upstreamcommit=$(git rev-parse --verify "$upstream") || exit
    git merge-base --is-ancestor "$HEADcommit" "$upstreamcommit" ||
        die "neither $refname nor $upstreamname contain HEAD"

    # but upstream of mainline does
    color magenta "Updating" reset " mainline " cyan "$refname" reset " with " cyan "$upstreamname" reset "..."

    git merge-base --is-ancestor "$commit" "$upstreamcommit" ||
        die "$refname contains commits not found in $upstreamname"

    git update-ref -m "git close-current-branch" "$ref" "$upstreamcommit" "$commit" || exit
fi

if [[ -n $HEADupstream ]] && git rev-parse --quiet --verify "$HEADupstream" >/dev/null; then
    if (( opt_upstream )); then
        HEADupstreamcommit=$(git rev-parse --verify "$HEADupstream") || exit
        if ! git merge-base --is-ancestor "$HEADupstreamcommit" "$HEADcommit"; then
            color red "error:" reset " upstream " cyan "$HEADupstreamname" reset " contains commits not found in " cyan "$HEADname" reset
            exit 1
        fi
        color magenta "Deleting" reset " upstream " cyan "$HEADupstreamname" reset "..." "${msg_suffix[@]}"
        if (( ! opt_dry_run )); then
            remote=$(git config --get branch."$HEADshort".remote 2>/dev/null) \
                remoteref=$(git config --get branch."$HEADshort".merge 2>/dev/null) ||
                die "failed to retrieve upstream branch information"
            git push --delete --force-with-lease="$remoteref:$HEADupstreamcommit" "$remote" "$remoteref" 2>&1 || exit
        fi
    elif (( opt_force )); then
        color yellow "warning:" reset " ignoring upstream " cyan "$HEADupstreamname" reset
    else
        color yellow "abort:" reset " upstream " cyan "$HEADupstreamname" reset " still exists"
        echo "       pass -u to delete or -f to ignore"
        exit 1
    fi
fi

color magenta "Checking out " cyan "$refname" reset "..." "${msg_suffix[@]}"
(( opt_dry_run )) || { git checkout "$refname" || exit; }

color magenta "Deleting " cyan "$HEADname" reset "..." "${msg_suffix[@]}"
(( opt_dry_run )) || { git update-ref -m "git close-current-branch" -d "$HEAD" "$HEADcommit" || exit; }
(( opt_dry_run )) || { git config --remove-section branch."$HEADshort" &>/dev/null; }
