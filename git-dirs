#!/bin/bash

# shellcheck source=./utils.bash
. "${BASH_SOURCE[0]%/*}"/utils.bash

# git rev-parse will bail on the first `@{-1}` syntax that refers to a deleted branch.
# So we need to repeatedly invoke it for each branch.

usage() {
    echo "Usage: git dirs [(--limit N)]"
    echo
    echo "Options:"
    echo "  -h --help        Displays this help."
    echo "  -l N, --limit N  Limits the branch history to N previous branches."
    echo "                   [default: 10]"
    [[ -z $1 ]] && return
    echo
    echo "Description:"
    echo "  Prints the N most recently checked-out branches."
    echo "  Branches that have been deleted are displayed as '(deleted branch)'."
}

limit=10

while (( $# > 0 )); do
    case $1 in
        --limit|-l)
            [[ -n $2 ]] || die 2 "expected parameter with $1" "$(usage)"
            limit=$2
            [[ $limit =~ ^[[:digit:]]+$ ]] || die 2 "parameter to $1 must be a positive number" "$(usage)"
            [[ $limit == 0 ]] && die 2 "parameter to $1 cannot be zero" "$(usage)"
            shift
            ;;
        --help|-h)
            usage full
            exit 0
            ;;
        --)
            shift
            break
            ;;
        -*)
            die 2 "unknown flag $1" "$(usage)"
            ;;
        *)
            break
    esac
    shift
done

(( $# == 0 )) || die 2 "unexpected argument '$1'" "$(usage)"

git rev-parse --git-dir >/dev/null || exit

IFS=$'\n' read -r -d '' -a HEAD <<<"$(git -c core.warnAmbiguousRefs=false rev-parse HEAD --symbolic-full-name HEAD)"

for (( i=1; i <= limit; i++ )); do
    printf '@{-%d}: ' "$i"
    if rawBranch="$(git rev-parse "@{-$i}" --symbolic-full-name "@{-$i}" --abbrev-ref "@{-$i}" 2>/dev/null)"; then
        IFS=$'\n' read -r -d '' -a branch <<<"$rawBranch"
        if [[ -n ${branch[1]} ]]; then
            config=local color=normal
            if [[ ${HEAD[1]} == "${branch[1]}" ]]; then
                config=current color=green
            fi
            color -b color.branch -c color.branch."$config" "$color" "${branch[2]}" reset
        else
            config=plain color=normal
            if [[ ${HEAD[1]} == HEAD && ${branch[0]} == "${HEAD[0]}" ]]; then
                config=current color=green
            fi
            msg="(detached from $(git rev-parse --short "${branch[0]}"))"
            color -b color.branch -c color.branch."$config" "$color" "$msg" reset
        fi
    else
        color -b color.branch red '(deleted branch)' reset
    fi
done
